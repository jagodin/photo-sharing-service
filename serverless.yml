service: 'photo-sharing-service'

frameworkVersion: '2'

plugins:
    # - serverless-esbuild
    - serverless-s3-sync
    - serverless-plugin-scripts
	
variablesResolutionMode: 20210326

custom:
    photosBucketName: ${env:S3_BUCKET_NAME}
    # serverless-s3-sync config, handles uploading static files to S3
    s3Sync:
        buckets:
            - bucketNameKey: WebsiteBucketName
              bucketPrefix: website/
              localDir: public
              params:
                  - favicon.png:
                        CacheControl: 'public, max-age=3600'
                  - 'static/**/*':
                        CacheControl: 'public, max-age=31536000, immutable'
    scripts:
        hooks:
            'aws:deploy:finalize:cleanup': ${file(./scripts/post-deployment.js)}

provider:
    name: aws
    runtime: nodejs14.x
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-east-1'}
    timeout: 30
    environment:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
        NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
        DATABASE_URL: 
            !Join
                - ''
                - - 'postgresql://'
                  - !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:username}}'
                  - ':'
                  - !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:password}}'
                  - '@'
                  - !GetAtt 'DBCluster.Endpoint.Address'
                  - ':'
                  - !GetAtt 'DBCluster.Endpoint.Port'
                  - '/photosharingservice?schema=public'
        SESSION_SECRET: ${env:SESSION_SECRET}
        S3_ACCESS_KEY_ID: ${env:S3_ACCESS_KEY_ID}
        S3_SECRET_ACCESS_KEY: ${env:S3_SECRET_ACCESS_KEY}
        S3_REGION: ${env:S3_REGION}
        S3_BUCKET_NAME: !Ref PhotosBucket
        HOST: !GetAtt 'CDN.DomainName'
        API_KEY: ${env:API_KEY}
    lambdaHashingVersion: '20201221'
    ecr:
      images:
        photo-sharing-service:
          path: ./
        db-init:
          path: ./
          file: functions/migrate/Dockerfile
    vpc:
        securityGroupIds:
            - Ref: DatabaseSecurityGroup
        subnetIds:
            - Ref: Subnet1
            - Ref: Subnet2
            - Ref: Subnet3

functions:
  photo-sharing-service:
    image:
      name: photo-sharing-service
    description: A simple Photo Sharing network built with Remix.
    timeout: 120
    events:
        - httpApi:
              method: any
              path: '/{proxy+}'

  dbInit:
    image:
      name: db-init
    timeout: 60

resources:
    Resources:
        # Created by serverless
        HttpApi:
          Type: AWS::ApiGatewayV2::Api
          Properties:
            Name: ${self:provider.stage}-${self:service}
            ProtocolType: HTTP

        PhotosBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: !Sub ${self:service}-${self:provider.stage}-images

        PhotosOriginAccessIdentity:
            Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
            Properties:
                CloudFrontOriginAccessIdentityConfig:
                    Comment: Origin Access Identity to Access ${self:service} Photos Bucket ${self:provider.stage}
        PhotosBucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket: !Ref PhotosBucket
                PolicyDocument:
                    Statement:
                        - Effect: Allow
                          Action:
                              - s3:GetObject
                          Resource:
                              Fn::Join:
                                  - /
                                  - - Fn::GetAtt:
                                          - PhotosBucket
                                          - Arn
                                    - '*'
                          Principal:
                              CanonicalUser:
                                  Fn::GetAtt:
                                      - PhotosOriginAccessIdentity
                                      - S3CanonicalUserId

        # S3 bucket for static assets
        WebsiteBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: !Sub ${self:custom.photosBucketName}-${self:provider.stage}

        # Allow CloudFront to use GetObject in the WebsiteBucket
        WebsiteOriginAccessIdentity:
            Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
            Properties:
                CloudFrontOriginAccessIdentityConfig:
                    Comment: Origin Access Identity to Access ${self:service} Website Bucket ${self:provider.stage}
        WebsiteBucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket: !Ref WebsiteBucket
                PolicyDocument:
                    Statement:
                        - Effect: Allow
                          Action:
                              - s3:GetObject
                          Resource:
                              Fn::Join:
                                  - /
                                  - - Fn::GetAtt:
                                          - WebsiteBucket
                                          - Arn
                                    - '*'
                          Principal:
                              CanonicalUser:
                                  Fn::GetAtt:
                                      - WebsiteOriginAccessIdentity
                                      - S3CanonicalUserId

        # CloudFront Configuration
        CDN:
            Type: AWS::CloudFront::Distribution
            DependsOn:
                - PhotosBucket
                - WebsiteBucket
                - HttpApi
            Properties:
                DistributionConfig:
                    Origins:
                        - DomainName:
                              Fn::GetAtt:
                                  - PhotosBucket
                                  - DomainName
                          Id: PhotosOrigin
                          S3OriginConfig:
                              OriginAccessIdentity:
                                  Fn::Join:
                                      - /
                                      - - origin-access-identity
                                        - cloudfront
                                        - !Ref PhotosOriginAccessIdentity
                        - DomainName:
                              Fn::GetAtt:
                                  - WebsiteBucket
                                  - DomainName
                          Id: StaticOrigin
                          S3OriginConfig:
                              OriginAccessIdentity:
                                  Fn::Join:
                                      - /
                                      - - origin-access-identity
                                        - cloudfront
                                        - !Ref WebsiteOriginAccessIdentity
                          OriginPath: '/website'
                        - DomainName:
                              Fn::Join:
                                  - ''
                                  - - Ref: HttpApi
                                    - '.execute-api.${self:provider.region}.amazonaws.com'
                          Id: RemixOrigin
                          # UNCOMMENT THIS TO SET THE X-Forwarded-Host header for API Gateway
                        #   OriginCustomHeaders:
                        #     - HeaderName: X-Forwarded-Host
                        #       HeaderValue: ${env:HOST}
                          CustomOriginConfig:
                              OriginProtocolPolicy: https-only
                              OriginSSLProtocols: [TLSv1.2]

                    # missing static assets will give a 403 from s3, so you can override the error response here
                    # CustomErrorResponses:
                    # - ErrorCachingMinTTL: 60
                    #   ErrorCode: 403
                    #   ResponseCode: 404
                    #   ResponsePagePath: /404
                    # By default, all requests go to remix
                    DefaultCacheBehavior:
                        AllowedMethods:
                            [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
                        CachedMethods: [GET, HEAD, OPTIONS]
                        Compress: true
                        TargetOriginId: RemixOrigin
                        ViewerProtocolPolicy: redirect-to-https
                        DefaultTTL: 0
                        MaxTTL: 0
                        MinTTL: 0
                        ForwardedValues:
                            QueryString: true
                            Cookies:
                                  Forward: all
                    # Requests to /static go to S3
                    CacheBehaviors:
                        - PathPattern: 'images/*'
                          AllowedMethods:
                              - GET
                              - HEAD
                          CachedMethods:
                              - GET
                              - HEAD
                          Compress: true
                          ForwardedValues:
                              QueryString: true
                              Cookies:
                                  Forward: none
                          TargetOriginId: PhotosOrigin
                          ViewerProtocolPolicy: redirect-to-https
                        - PathPattern: 'static/*'
                          AllowedMethods:
                              - GET
                              - HEAD
                          CachedMethods:
                              - GET
                              - HEAD
                          Compress: true
                          ForwardedValues:
                              QueryString: true
                              Cookies:
                                  Forward: all
                          TargetOriginId: StaticOrigin
                          ViewerProtocolPolicy: redirect-to-https
                        # Special rule for browser favicon requests to also go to S3 origin
                        - PathPattern: '/favicon.*'
                          AllowedMethods:
                              - GET
                              - HEAD
                          CachedMethods:
                              - GET
                              - HEAD
                          Compress: false
                          ForwardedValues:
                              QueryString: false
                              Cookies:
                                  Forward: none
                          TargetOriginId: StaticOrigin
                          ViewerProtocolPolicy: redirect-to-https
                    Comment: ${self:service}-${self:provider.stage}
                    Enabled: true
                    HttpVersion: http2
                    PriceClass: PriceClass_100
                    ViewerCertificate:
                        CloudFrontDefaultCertificate: true

        ServerlessVPC:
            Type: AWS::EC2::VPC
            Properties:
                CidrBlock: 10.192.0.0/16
                EnableDnsSupport: true
                EnableDnsHostnames: true
                Tags:
                    - {Key: Name, Value: !Ref AWS::StackName} # the console will display this as the name
        
        Subnet1:
            Type: AWS::EC2::Subnet
            Properties: 
                CidrBlock: 10.192.0.0/20
                AvailabilityZone: !Select [0, !GetAZs '']
                VpcId: !Ref ServerlessVPC
        Subnet2:
            Type: AWS::EC2::Subnet
            Properties: 
                CidrBlock: 10.192.16.0/20
                AvailabilityZone: !Select [1, !GetAZs '']
                VpcId: !Ref ServerlessVPC
        Subnet3:
            Type: AWS::EC2::Subnet
            Properties: 
                CidrBlock: 10.192.32.0/20
                AvailabilityZone: !Select [2, !GetAZs '']
                VpcId: !Ref ServerlessVPC
        
        # subnet and security groups for the database later 
        DatabaseSubnetGroup:
            Type: AWS::RDS::DBSubnetGroup
            Properties: 
                DBSubnetGroupDescription: Database
                SubnetIds: [!Ref Subnet1, !Ref Subnet2, !Ref Subnet3]
        DatabaseSecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: Database
                VpcId: !Ref ServerlessVPC
                SecurityGroupIngress:
                    - {CidrIp: !GetAtt ServerlessVPC.CidrBlock, FromPort: 5432, ToPort: 5432, IpProtocol: tcp}
        
        DatabaseSecret:
            Type: AWS::SecretsManager::Secret
            Properties:
                Name: !Sub '/${AWS::StackName}/database/root'
                GenerateSecretString:
                    SecretStringTemplate: '{"username": "root"}'
                    GenerateStringKey: "password"
                    ExcludeCharacters: '"@/\'
                    ExcludePunctuation: true
                    

        DBCluster:
            Type: 'AWS::RDS::DBCluster'
            Properties:
                MasterUsername: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:username}}'
                MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:password}}'
                DBClusterIdentifier: photo-sharing-service-${self:provider.stage}
                DatabaseName: photosharingservice
                Engine: aurora-postgresql
                EngineVersion: 10.7
                EngineMode: serverless
                DBSubnetGroupName: !Ref DatabaseSubnetGroup
                VpcSecurityGroupIds: [!Ref DatabaseSecurityGroup]
                ScalingConfiguration:
                    AutoPause: true
                    MinCapacity: 2
                    MaxCapacity: 4
                    SecondsUntilAutoPause: 1000
    
    Outputs:
        WebsiteBucketName:
            Value:
                Ref: WebsiteBucket
        DistributionID:
            Value:
                Ref: CDN
        WebsiteDomain:
            Value:
                Fn::GetAtt: [CDN, DomainName]
