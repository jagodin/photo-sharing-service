// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x", "native"]
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                      Int @id @default(autoincrement())
  username                    String @unique
  name                        String
  email                       String @unique
  password                    String
  lastLogin                   DateTime?
  followers                   Follows[] @relation("follower")
  following                   Follows[] @relation("following")
  profilePicture              String?
  updatedAt                   DateTime @updatedAt
  createdAt                   DateTime @default(now())
  posts                       Post[]
  comments                    Comment[]
  profileDescription          String?
  favorites                   Favorites[]
  notifications               Notification[] @relation("user")
  notificationsForOtherUsers  Notification[] @relation("originUser")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [userId])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [userId])
  followingId Int

  @@id([followerId, followingId])
}

enum PostType {
  PICTURE
  VIDEO
}

model Post {
  postId        Int @id @default(autoincrement())
  description   String?
  author        User @relation(fields: [authorId], references: [userId])
  authorId      Int
  type          PostType
  url           String
  favorites     Favorites[]
  notifications Notification[]
  comments      Comment[]
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())
}

model Favorites {
  user    User @relation(fields: [userId], references: [userId])
  userId  Int
  post    Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId  Int

  @@id([userId, postId])
}

model Comment {
  commentId     Int @id @default(autoincrement())
  content       String
  author        User @relation(fields: [authorId], references: [userId])
  authorId      Int
  post          Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId        Int
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())
}

model Notification {
  notificationId   Int @id @default(autoincrement())
  user             User @relation(name: "user", fields: [userId], references: [userId])
  userId           Int
  originUser       User @relation(name: "originUser", fields: [originUserId], references: [userId])
  originUserId     Int
  type             NotificationType
  post             Post? @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId           Int?
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
}

enum NotificationType {
  FOLLOW
  LIKE
}